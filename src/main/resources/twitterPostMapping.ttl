@prefix rr: <http://www.w3.org/ns/r2rml#>.
@prefix rml: <http://semweb.mmlab.be/ns/rml#>.
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix carml: <http://carml.taxonic.com/carml/> .
@prefix base: <http://localhost/socialNetwork/model/>.
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix ns: <http://www.w3.org/2003/06/sw-vocab-status/ns#>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix wot: <http://xmlns.com/wot/0.1/>.
@prefix xml: <http://www.w3.org/XML/1998/namespace>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix terms: <http://purl.org/dc/terms/>.
@prefix time: <http://www.w3.org/2006/time#> .
@prefix fno: <http://semweb.datasciencelab.be/ns/function#> .
@prefix fnml: <http://semweb.mmlab.be/ns/fnml#> .
@prefix marl: <http://purl.org/marl/ns#>.

<#PublicationMapping> a rr:TriplesMap ;
 rml:logicalSource [
                 rml:source [
                         a carml:Stream;
                         carml:streamName "inputStream";
                 ];
                 rml:referenceFormulation ql:JSONPath;
                 rml:iterator "$"
         ];

  rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/Publication/{id}" ;
     rr:class base:Publication ;

  ] ;
rr:predicateObjectMap [
   rr:predicate base:shareOf;
    rr:objectMap [
      rr:parentTriplesMap <#OriginalPublicationMapping>;
    ] ;
  ];
  rr:predicateObjectMap [
   rr:predicate rdfs:subClassOf;
    rr:objectMap [
      rr:parentTriplesMap <#ContentMapping>;
    ] ;
  ];
 rr:predicateObjectMap [
   rr:predicate base:sharedBy;
    rr:objectMap [
      rr:parentTriplesMap <#SingleAuthorMapping>;
    ] ;
  ].


 <#OriginalPublicationMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];

  rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/Publication/{retweetedStatus.id}" ;
  rr:class base:Publication ;
  ] ;

 rr:predicateObjectMap [
   rr:predicate rdfs:subClassOf;
    rr:objectMap [
      rr:parentTriplesMap <#OriginalContentMapping>;
    ] ;
  ];

  rr:predicateObjectMap [
   rr:predicate base:publishedBy;
    rr:objectMap [
      rr:parentTriplesMap <#FirstAuthorMapping>;
      rr:joinCondition [
        rr:child "user";
        rr:parent "$.retweetedStatus";
      ];
    ] ;
  ].
<#OriginalContentMapping> a rr:TriplesMap ;
   rml:logicalSource [
                   rml:source [
                           a carml:Stream;
                           carml:streamName "inputStream";
                   ];
                   rml:referenceFormulation ql:JSONPath;
                   rml:iterator "$"
           ];

 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/Content/{retweetedStatus.id}" ;
     rr:class base:Content ;
  ] ;
   rr:predicateObjectMap [
    rr:predicate base:hasDevice  ;
    rr:objectMap [
         rr:parentTriplesMap <#OriginalDateMapping>;
    ] ;
  ] ;

 rr:predicateObjectMap [
    rr:predicate base:hasFeedBack  ;
    rr:objectMap [
       rr:parentTriplesMap <#OriginalFeedBackMapping>;
    ] ;
  ] ;

rr:predicateObjectMap [
    rr:predicate base:hasType  ;
    rr:objectMap [
       rr:parentTriplesMap <#OriginalTextMapping>;
    ] ;
  ];

  rr:predicateObjectMap [
    rr:predicate base:sourcedFrom  ;
    rr:objectMap [
        rr:parentTriplesMap <#SourceMapping>;
    ] ;
  ] ;

   rr:predicateObjectMap [
    rr:predicate base:hasDevice  ;
    rr:objectMap [
        rml:reference "$.retweetedStatus.source";
    ] ;
  ] ;
     rr:predicateObjectMap [
    rr:predicate base:hasLocation  ;
    rr:objectMap [
        rml:reference "$.retweetedStatus.geoLocation";
    ] ;
  ] .

   <#OriginalDateMapping> a rr:TriplesMap ;
  rml:logicalSource [
                  rml:source [
                          a carml:Stream;
                          carml:streamName "inputStream";
                  ];
                  rml:referenceFormulation ql:JSONPath;
                  rml:iterator "$"
          ];
  rr:subjectMap [
    rr:template "http://www.w3.org/2006/time#GeneralDateTimeDescription" ;
  rr:termType rr:BlankNode ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate time:year ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:YearMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.retweetedStatus.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:integer ;
  ];];
  rr:predicateObjectMap [
    rr:predicate time:month ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:MonthMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.retweetedStatus.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:integer ;
  ];];
  rr:predicateObjectMap [
    rr:predicate time:day ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:DayMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.retweetedStatus.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:integer ;
  ];];
  rr:predicateObjectMap [
    rr:predicate time:hour ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:HourMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.retweetedStatus.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:nonNegativeInteger ;
  ];];
  rr:predicateObjectMap [
    rr:predicate time:minute ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:MinuteMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.retweetedStatus.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:decimal ;
  ];];
    rr:predicateObjectMap [
    rr:predicate time:second ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:SecondMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.retweetedStatus.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:decimal ;
  ];].
  <#OriginalFeedBackMapping> a rr:TriplesMap ;
 rml:logicalSource [
                 rml:source [
                         a carml:Stream;
                         carml:streamName "inputStream";
                 ];
                 rml:referenceFormulation ql:JSONPath;
                 rml:iterator "$"
         ];

 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{retweetedStatus.id}/FeedBack" ;
 rr:class base:FeedBack;
  ] ;
  rr:predicateObjectMap [
    rr:predicate rdfs:subClassOf;
    rr:objectMap [
   rr:parentTriplesMap <#OriginalPopularityMetricsMapping>;
    ] ;
  ];
  rr:predicateObjectMap [
    rr:predicate base:likesCount;
    rr:objectMap [
    rml:reference "$.retweetedStatus.favoriteCount";
     rr:datatype xsd:nonNegativeInteger ;
    ] ;
  ];
  rr:predicateObjectMap [
    rr:predicate base:sharesCount;
    rr:objectMap [
     rml:reference "$.retweetedStatus.retweetCount";
      rr:datatype xsd:nonNegativeInteger ;
    ] ;
  ].
  <#OriginalTextMapping> a rr:TriplesMap ;
  rml:logicalSource [
                  rml:source [
                          a carml:Stream;
                          carml:streamName "inputStream";
                  ];
                  rml:referenceFormulation ql:JSONPath;
                  rml:iterator "$"
          ];
 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{retweetedStatus.id}/Text" ;
      rr:class base:Text ;

  ] ;
 rr:predicateObjectMap [
    rr:predicate rdfs:subClassOf;
    rr:objectMap [
      rr:template "http://localhost/socialNetwork/model/Type";
     rr:class base:Type;
    ] ];
    rr:predicateObjectMap [
    rr:predicate base:hasProperties;
    rr:objectMap [
        rr:parentTriplesMap <#OriginalTextPropertiesMapping>;
    ] ;
  ] ;
 rr:predicateObjectMap [
    rr:predicate base:hasTextFeatures;
    rr:objectMap [
         rr:parentTriplesMap <#TextFeaturesMapping>;
    ] ].

  <#OriginalTextPropertiesMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];

 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{retweetedStatus.id}/TextProperties" ;
      rr:class base:TextProperties ;

  ] ;
  rr:predicateObjectMap [
   rr:predicate rdfs:subClassOf;
    rr:objectMap [
  rr:parentTriplesMap <#OriginalPropertiesMapping>;
    ] ;
  ] ;


rr:predicateObjectMap [
    rr:predicate base:hasLanguage ;
    rr:objectMap [
      rml:reference "$.retweetedStatus.lang";
    ]] .
    <#OriginalPropertiesMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];

 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{retweetedStatus.id}/Properties" ;
 rr:class  base:Properties
  ] ;
  rr:predicateObjectMap [
   rr:predicate rdfs:subClassOf;
    rr:objectMap [
      rr:parentTriplesMap <#OriginalContextualFeaturesMapping>;
     ] ;
  ] .
     <#OriginalContextualFeaturesMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];
 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{retweetedStatus.id}/ContextualFeatures" ;
rr:class  base:ContextualFeatures;
  ] ;

 rr:predicateObjectMap [
    rr:predicate rdfs:subClassOf;
    rr:objectMap [
       rr:parentTriplesMap <#OriginalPopularityMetricsMapping>;
    ] ].

     <#OriginalPopularityMetricsMapping> a rr:TriplesMap ;
 rml:logicalSource [
                 rml:source [
                         a carml:Stream;
                         carml:streamName "inputStream";
                 ];
                 rml:referenceFormulation ql:JSONPath;
                 rml:iterator "$"
         ];

 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{retweetedStatus.id}/PopularityMetrics" ;
    rr:class  base:PopularityMetrics;
  ] .

<#ContentMapping> a rr:TriplesMap ;
 rml:logicalSource [
                 rml:source [
                         a carml:Stream;
                         carml:streamName "inputStream";
                 ];
                 rml:referenceFormulation ql:JSONPath;
                 rml:iterator "$"
         ];

 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/Content/{id}" ;
     rr:class base:Content ;
  ] ;
  rr:predicateObjectMap [
    rr:predicate base:hasFeedBack  ;
    rr:objectMap [
       rr:parentTriplesMap <#FeedBackMapping>;
    ] ;
  ] ;
   rr:predicateObjectMap [
    rr:predicate base:createdAt  ;
    rr:objectMap [
       rr:parentTriplesMap <#DateMapping>;
    ] ;
  ] ;

  rr:predicateObjectMap [
    rr:predicate base:sourcedFrom  ;
    rr:objectMap [
        rr:parentTriplesMap <#SourceMapping>;
    ] ;
  ] ;

rr:predicateObjectMap [
    rr:predicate base:hasType  ;
    rr:objectMap [
       rr:parentTriplesMap <#TextMapping>;
    ] ;
  ];
   rr:predicateObjectMap [
    rr:predicate base:hasDevice  ;
    rr:objectMap [
        rml:reference "$.source";
    ] ;
  ]  .

  <#DateMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];
  rr:subjectMap [
    rr:template "http://www.w3.org/2006/time#GeneralDateTimeDescription" ;
  rr:class time:GeneralDateTimeDescription;
  ] ;
  rr:predicateObjectMap [
    rr:predicate time:year ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:YearMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:integer ;
  ];];
  rr:predicateObjectMap [
    rr:predicate time:month ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:MonthMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:integer ;
  ];];
  rr:predicateObjectMap [
    rr:predicate time:day ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:DayMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:integer ;
  ];];
  rr:predicateObjectMap [
    rr:predicate time:hour ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:HourMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:nonNegativeInteger ;
  ];];
  rr:predicateObjectMap [
    rr:predicate time:minute ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:MinuteMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:decimal ;
  ];];
    rr:predicateObjectMap [
    rr:predicate time:second ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:SecondMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:decimal ;
  ];].

<#FeedBackMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];

 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{id}/FeedBack" ;
      rr:class base:FeedBack;
  ] ;
  rr:predicateObjectMap [
    rr:predicate rdfs:subClassOf;
    rr:objectMap [
   rr:parentTriplesMap <#PopularityMetricsMapping>;
    ] ;
  ];
  rr:predicateObjectMap [
    rr:predicate base:likesCount;
    rr:objectMap [
    rml:reference "$.favoriteCount";
    rr:datatype xsd:nonNegativeInteger ;
    ] ;
  ];
  rr:predicateObjectMap [
    rr:predicate base:sharesCount;
    rr:objectMap [
     rml:reference "$.retweetCount";
     rr:datatype xsd:nonNegativeInteger ;
    ] ;
  ].

      <#SourceMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];
 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/Source" ;
    rr:termType rr:BlankNode ;
  ] ;

 rr:predicateObjectMap [
    rr:predicate base:hasCategory;
    rr:objectMap [
      rr:constant "MicroBlog" ;
        rr:datatype xsd:string ;
    ] ];
 rr:predicateObjectMap [
    rr:predicate base:hasLink;
    rr:objectMap [
        rr:constant "http://twitter.com" ;
         rr:datatype xsd:string ;
    ] ];
    rr:predicateObjectMap [
    rr:predicate base:hasName;
    rr:objectMap [
        rr:constant "Twitter" ;
         rr:datatype xsd:string ;
    ] ;
  ] .


<#TextMapping> a rr:TriplesMap ;
 rml:logicalSource [
                 rml:source [
                         a carml:Stream;
                         carml:streamName "inputStream";
                 ];
                 rml:referenceFormulation ql:JSONPath;
                 rml:iterator "$"
         ];

 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{id}/Text" ;
      rr:class base:Text ;

  ] ;
 rr:predicateObjectMap [
    rr:predicate rdfs:subClassOf;
    rr:objectMap [
      rr:template "http://localhost/socialNetwork/model/Type";
      rr:class base:Type
    ] ];
    rr:predicateObjectMap [
    rr:predicate base:hasOpinion;
    rr:objectMap [
        rr:parentTriplesMap <#OpinionMapping>;
    ] ;
  ] ;
    rr:predicateObjectMap [
    rr:predicate base:hasProperties;
    rr:objectMap [
        rr:parentTriplesMap <#TextPropertiesMapping>;
    ] ;
  ] ;
 rr:predicateObjectMap [
    rr:predicate base:hasTextFeatures;
    rr:objectMap [
         rr:parentTriplesMap <#TextFeaturesMapping>;
    ] ].

    <#OpinionMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];
 rr:subjectMap [
    rr:template "http://purl.org/marl/ns#Opinion" ;
    rr:termType rr:BlankNode ;
    rr:class marl:Opinion ;

  ] ;
  rr:predicateObjectMap [
    rr:predicate base:hasPolarity;
    rr:objectMap [
      rr:template "http://purl.org/marl/ns#Negative";
     rr:class marl:Polarity ;

    ]] .


<#TextPropertiesMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];

 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{id}/TextProperties" ;
      rr:class base:TextProperties ;

  ] ;
  rr:predicateObjectMap [
   rr:predicate rdfs:subClassOf;
    rr:objectMap [
  rr:parentTriplesMap <#PropertiesMapping>;
    ] ;
  ] ;


rr:predicateObjectMap [
    rr:predicate base:hasLanguage ;
    rr:objectMap [
      rml:reference "$.lang";
    ]] .

    <#PropertiesMapping> a rr:TriplesMap ;
 rml:logicalSource [
                 rml:source [
                         a carml:Stream;
                         carml:streamName "inputStream";
                 ];
                 rml:referenceFormulation ql:JSONPath;
                 rml:iterator "$"
         ];

 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{id}/Properties" ;
 rr:class  base:Properties
  ] ;
  rr:predicateObjectMap [
   rr:predicate rdfs:subClassOf;
    rr:objectMap [
      rr:parentTriplesMap <#ContextualFeaturesMapping>;
     ] ;
  ] .

    <#ContextualFeaturesMapping> a rr:TriplesMap ;
 rml:logicalSource [
                 rml:source [
                         a carml:Stream;
                         carml:streamName "inputStream";
                 ];
                 rml:referenceFormulation ql:JSONPath;
                 rml:iterator "$"
         ];
 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{id}/ContextualFeatures" ;
rr:class  base:ContextualFeatures;
  ] ;

 rr:predicateObjectMap [
    rr:predicate rdfs:subClassOf;
    rr:objectMap [
       rr:parentTriplesMap <#PopularityMetricsMapping>;
    ] ].

       <#PopularityMetricsMapping> a rr:TriplesMap ;
 rml:logicalSource [
                 rml:source [
                         a carml:Stream;
                         carml:streamName "inputStream";
                 ];
                 rml:referenceFormulation ql:JSONPath;
                 rml:iterator "$"
         ];

 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{id}/PopularityMetrics" ;
    rr:class  base:PopularityMetrics;
  ] .

    <#TextFeaturesMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];

 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{id}/TextFeatures" ;
  rr:class  base:TextFeatures;
  ] ;
 rr:predicateObjectMap [
    rr:predicate base:hasValue ;
    rr:objectMap [
      rml:reference "$.text";
    ]] ;

     rr:predicateObjectMap [
    rr:predicate base:mentionedPerson;
    rr:objectMap [
      rml:reference "$.text";
    ]] ;

 rr:predicateObjectMap [
    rr:predicate base:hasHashTag ;
    rr:objectMap [
      rml:reference "$.text";
    ]] ;

    rr:predicateObjectMap [
    rr:predicate base:hasTopic ;
    rr:objectMap [
      rml:reference "$.text";
    ]] ;

    rr:predicateObjectMap [
    rr:predicate base:hasURL ;
    rr:objectMap [
      rml:reference "$.text";
    ]] ;
     rr:predicateObjectMap [
    rr:predicate rdfs:subClassOf;
    rr:objectMap [
      rr:parentTriplesMap <#ContentFeaturesMapping>;
    ] ].

     <#ContentFeaturesMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];
 rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{id}/ContentFeatures" ;
rr:class base:ContentFeatures;
  ] ;

 rr:predicateObjectMap [
    rr:predicate rdfs:subClassOf;
    rr:objectMap [
      rml:reference "http://localhost/socialNetwork/model/PopularityMetrics";
    ]] .


    <#SingleAuthorMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];

  rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/SingleAuthor/{user.id}" ;
    rr:class foaf:Person

  ] ;
   rr:predicateObjectMap [
   rr:predicate rdfs:subClassOf;
    rr:objectMap [
      rr:parentTriplesMap <#AuthorMapping>;
    ] ;
  ];

  rr:predicateObjectMap [
   rr:predicate base:hasStatus;
    rr:objectMap [
      rml:reference "$.user.status";
       rr:datatype xsd:string ;
    ] ;
  ];
   rr:predicateObjectMap [
   rr:predicate base:hasConnectivityMetrics;
    rr:objectMap [
   rr:parentTriplesMap <#ConnectivityMetricsMapping>;
    ] ;
  ];
   rr:predicateObjectMap [
   rr:predicate base:hasActivityMetrics;
    rr:objectMap [
   rr:parentTriplesMap <#ActivityMetricsMapping>;
    ] ;
  ].


 <#AuthorMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];

  rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/Author/{user.id}" ;
 rr:class base:Author
  ] ;

rr:predicateObjectMap [
   rr:predicate foaf:OnlineAccount;
    rr:objectMap [
      rml:reference "$.user.screenName";
         rr:datatype xsd:string ;
    ] ;
  ];
  rr:predicateObjectMap [
   rr:predicate base:hasScreenName;
    rr:objectMap [
      rml:reference "$.user.name";
         rr:datatype xsd:string ;
    ] ;
  ];
   rr:predicateObjectMap [
   rr:predicate base:hasDescription;
    rr:objectMap [
      rml:reference "$.user.description";
         rr:datatype xsd:string ;
    ] ;
  ];
rr:predicateObjectMap [
   rr:predicate base:hasLocation;
    rr:objectMap [
      rml:reference "$.user.location";
         rr:datatype xsd:string ;
    ] ;
  ];
  rr:predicateObjectMap [
   rr:predicate base:hasEmail;
    rr:objectMap [
      rml:reference "$.user.email";
         rr:datatype xsd:string ;
    ] ;
  ];
  rr:predicateObjectMap [
   rr:predicate base:createdAt;
    rr:objectMap [
     rr:parentTriplesMap  <#AuthorCreationDateMapping>;
    ] ;
  ];
  rr:predicateObjectMap [
   rr:predicate base:hasLanguage;
    rr:objectMap [
      rml:reference "$.user.lang";
         rr:datatype xsd:string ;
    ] ;
  ].

 <#AuthorCreationDateMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];
  rr:subjectMap [
    rr:template "http://www.w3.org/2006/time#GeneralDateTimeDescription" ;
  rr:class time:GeneralDateTimeDescription;
  ] ;
  rr:predicateObjectMap [
    rr:predicate time:year ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:YearMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.user.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:integer ;
  ];];
  rr:predicateObjectMap [
    rr:predicate time:month ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:MonthMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.user.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:integer ;
  ];];
  rr:predicateObjectMap [
    rr:predicate time:day ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:DayMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.user.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:integer ;
  ];];
  rr:predicateObjectMap [
    rr:predicate time:hour ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:HourMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.user.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:nonNegativeInteger ;
  ];];
  rr:predicateObjectMap [
    rr:predicate time:minute ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:MinuteMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.user.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:decimal ;
  ];];
    rr:predicateObjectMap [
    rr:predicate time:second ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:SecondMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.user.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:decimal ;
  ];].



 <#ConnectivityMetricsMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];

  rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{user.id}/ConnectivityMetrics" ;
 rr:class base:ConnectivityMetrics
  ] ;
   rr:predicateObjectMap [
   rr:predicate base:friendsCount;
    rr:objectMap [
     rml:reference "$.user.friendsCount";
      rr:datatype xsd:nonNegativeInteger;
    ] ;
  ];
  rr:predicateObjectMap [
   rr:predicate base:followersCount;
    rr:objectMap [
      rml:reference "$.user.followersCount";
       rr:datatype xsd:nonNegativeInteger;
    ] ;
  ] .
   <#ActivityMetricsMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];

  rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{user.id}/ActivityMetrics" ;
 rr:class base:ActivityMetrics
  ] ;
   rr:predicateObjectMap [
   rr:predicate base:publicationCount;
    rr:objectMap [
     rml:reference "$.user.statusesCount";
      rr:datatype xsd:nonNegativeInteger;
    ] ;
 ];
  rr:predicateObjectMap [
   rr:predicate base:subscriptionsCount;
    rr:objectMap [
     rml:reference "$.user.listedCount";
      rr:datatype xsd:nonNegativeInteger;
    ] ;
 ];
  rr:predicateObjectMap [
   rr:predicate base:likesCount;
    rr:objectMap [
     rml:reference "$.user.favourites_count";
      rr:datatype xsd:nonNegativeInteger;
    ] ;
 ].


   <#FirstAuthorMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];
  rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/SingleAuthor/{retweetedStatus.user.id}" ;
    rr:class foaf:Person

  ] ;
   rr:predicateObjectMap [
   rr:predicate rdfs:subClassOf;
    rr:objectMap [
      rr:parentTriplesMap <#OriginalAuthorMapping>;
    ] ;
  ];

  rr:predicateObjectMap [
   rr:predicate base:hasStatus;
    rr:objectMap [
      rml:reference "$.retweetedStatus.user.status";
       rr:datatype xsd:string ;
    ] ;
  ];
   rr:predicateObjectMap [
   rr:predicate base:hasConnectivityMetrics;
    rr:objectMap [
   rr:parentTriplesMap <#OriginalConnectivityMetricsMapping>;
    ] ;
  ];
   rr:predicateObjectMap [
   rr:predicate base:hasActivityMetrics;
    rr:objectMap [
   rr:parentTriplesMap <#OriginalActivityMetricsMapping>;
    ] ;
  ].

   <#OriginalAuthorMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];
  rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/Author/{retweetedStatus.user.id}" ;
rr:class base:Author
  ] ;

rr:predicateObjectMap [
   rr:predicate foaf:OnlineAccount;
    rr:objectMap [
      rml:reference "$.retweetedStatus.user.screenName";
         rr:datatype xsd:string ;
    ] ;
  ];
  rr:predicateObjectMap [
   rr:predicate base:hasScreenName;
    rr:objectMap [
      rml:reference "$.retweetedStatus.user.name";
         rr:datatype xsd:string ;
    ] ;
  ];
   rr:predicateObjectMap [
   rr:predicate base:hasDescription;
    rr:objectMap [
      rml:reference "$.retweetedStatus.user.description";
         rr:datatype xsd:string ;
    ] ;
  ];
rr:predicateObjectMap [
   rr:predicate base:hasLocation;
    rr:objectMap [
      rml:reference "$.retweetedStatus.user.location";
         rr:datatype xsd:string ;
    ] ;
  ];
  rr:predicateObjectMap [
   rr:predicate base:hasEmail;
    rr:objectMap [
      rml:reference "$.retweetedStatus.user.email";
         rr:datatype xsd:string ;
    ] ;
  ];
   rr:predicateObjectMap [
   rr:predicate base:createdAt;
    rr:objectMap [
      rr:parentTriplesMap <#OriginalAuthorCreationDateMapping>;
    ] ;
  ];
  rr:predicateObjectMap [
   rr:predicate base:hasLanguage;
    rr:objectMap [
      rml:reference "$.retweetedStatus.user.lang";
         rr:datatype xsd:string ;
    ] ;
  ].

  <#OriginalAuthorCreationDateMapping> a rr:TriplesMap ;
 rml:logicalSource [
                 rml:source [
                         a carml:Stream;
                         carml:streamName "inputStream";
                 ];
                 rml:referenceFormulation ql:JSONPath;
                 rml:iterator "$"
         ];
  rr:subjectMap [
    rr:template "http://www.w3.org/2006/time#GeneralDateTimeDescription" ;
  rr:class time:GeneralDateTimeDescription;
  ] ;
  rr:predicateObjectMap [
    rr:predicate time:year ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:YearMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.retweetedStatus.user.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:integer ;
  ];];
  rr:predicateObjectMap [
    rr:predicate time:month ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:MonthMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.retweetedStatus.user.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:integer ;
  ];];
  rr:predicateObjectMap [
    rr:predicate time:day ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:DayMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.retweetedStatus.user.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:integer ;
  ];];
  rr:predicateObjectMap [
    rr:predicate time:hour ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:HourMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.retweetedStatus.user.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:nonNegativeInteger ;
  ];];
  rr:predicateObjectMap [
    rr:predicate time:minute ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:MinuteMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.retweetedStatus.user.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:decimal ;
  ];];
    rr:predicateObjectMap [
    rr:predicate time:second ;
    rr:objectMap [
    a fnml:FunctionMap ;
    fnml:functionValue [
      rml:logicalSource base:LogicalSource ;
      rr:subjectMap [
        rr:template "functionExec";
        rr:termType rr:BlankNode ;
        rr:class fno:Execution
      ] ;
      rr:predicateObjectMap
        [
          rr:predicate fno:executes ;
          rr:objectMap [
            rr:constant base:SecondMappingFunction ;
          ]
        ] ,
        [
          rr:predicate base:intParameterA ;
          rr:objectMap [ rml:reference "$.retweetedStatus.user.createdAt" ]
        ]
    ] ;
    rr:datatype xsd:decimal ;
  ];].

  <#OriginalConnectivityMetricsMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];

  rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{retweetedStatus.user.id}/ConnectivityMetrics" ;
rr:class base:ConnectivityMetrics;
  ] ;
   rr:predicateObjectMap [
   rr:predicate base:friendsCount;
    rr:objectMap [
     rml:reference "$.retweetedStatus.user.friendsCount";
       rr:datatype xsd:nonNegativeInteger;
    ] ;
  ];
  rr:predicateObjectMap [
   rr:predicate base:followersCount;
    rr:objectMap [
      rml:reference "$.retweetedStatus.user.followersCount";
        rr:datatype xsd:nonNegativeInteger;
    ] ;
  ] .

   <#OriginalActivityMetricsMapping> a rr:TriplesMap ;
rml:logicalSource [
                rml:source [
                        a carml:Stream;
                        carml:streamName "inputStream";
                ];
                rml:referenceFormulation ql:JSONPath;
                rml:iterator "$"
        ];
  rr:subjectMap [
    rr:template "http://localhost/socialNetwork/model/{retweetedStatus.user.id}/ActivityMetrics" ;
rr:class base:ActivityMetrics;
  ] ;
   rr:predicateObjectMap [
   rr:predicate base:publicationCount;
    rr:objectMap [
     rml:reference "$.retweetedStatus.user.statusesCount";
    ] ;
 ];
  rr:predicateObjectMap [
   rr:predicate base:subscriptionsCount;
    rr:objectMap [
     rml:reference "$.retweetedStatus.user.listedCount";
       rr:datatype xsd:nonNegativeInteger;
    ] ;
 ];
  rr:predicateObjectMap [
   rr:predicate base:likesCount;
    rr:objectMap [
     rml:reference "$.retweetedStatus.user.favourites_count";
       rr:datatype xsd:nonNegativeInteger;
    ] ;
 ].

